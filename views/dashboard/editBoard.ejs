<script src="/js/jquery-2.1.1.min.js"></script>
<script src="/js/jquery-ui.min.js"></script>
<script src="/js/jquery.jcarousel.min.js"></script>
<script src="/js/jpicker-1.1.6.min_modified.js"></script>
<script src="/js/jquery.validate.min.js"></script>
<link rel="stylesheet" href="/css/jPicker-1.1.6.min.css">
<%- partial('../category.js') %>
<script>
function home(){
  submit("/dashboard/index");
}

function back(){
  submit("/dashboard/index");
}

/**
 * 利用可能付箋データを送信用に編集する。
 */
function setTicketData(){
	var value = "";
	var rows = $("tr.ticketDataRow");
	var i;
	for(i = 0; i < rows.length; i++){
		var r = rows[i];
		value += $(r).attr('id');
		value += ":";
		value += $(r).find(".ticketDataName").val();
		value += ":";
		value += $(r).find(".ticketDataCheck").prop('checked');
		if(i < rows.length - 1){
			value += ",";
		}
	};
	$("#ticketData").val(value);
}

/**
 * 利用可能付箋一覧のイベントと初期状態を設定する。
 */
function initTicketData(){
	var rows = $("tr.ticketDataRow");
	_.each(rows, function(row){
		var r = $(row);
		(function(dummy){
			r.find(".ticketDataCheck").bind("change", function(e){
				console.log("change");
				var flag = dummy.find(".ticketDataCheck").prop("checked");
				dummy.find(".ticketDataName").prop("disabled", !flag);
			});
		})(r);
		if(!r.find(".ticketDataCheck").prop('checked')){
			r.find(".ticketDataName").prop('disabled', true);
		}
	});
}

/**
 * 利用可能状態の付箋には名前が設定されていることをチェックする。
 */
function checkTicketData(){
	var rows = $("tr.ticketDataRow");
	var i;
	var numOfCheckedItems = 0;
	var ngArray = [];
	_.each(rows, function(r) {
		var checked = $(r).find(".ticketDataCheck").prop('checked');
		var type = $(r).find(".ticketDataType").text();
		var name = $(r).find(".ticketDataName").val();
		if(checked){
			numOfCheckedItems++;
			if(!name || name.trim() === ""){
				ngArray.push(type);
			}
		}
	});
	if(numOfCheckedItems === 0) {
		return {ok: false, message: "１つ以上の付箋をチェックしてください。"};
	}
	var ok = ngArray.length === 0;
	var message = "表示名称を入力してください：";
	for(i = 0; i < ngArray.length; i++){
		message += ngArray[i];
		if(i < ngArray.length - 1){
			message += ", ";
		}
	}
	return {ok: ok, message: message};
}

function save(){
  // エラーが存在する場合には処理を中断する。
  var res = validator.form();
  if(!res){
    $("#errorDialog").dialog({
      title : "入力チェック",
      modal: true,
      buttons: {
        Ok: function() {
          $( this ).dialog("close");
        }
      }
    });
  	return false;
  }
  var result = checkTicketData();
  if(!result["ok"]){
    alert(result["message"]);
    return false;
  }
  setTicketData();

  return submit("/board/updateBoard");
}

function cancel(){
  submit("/dashboard/index");
}

function getTime(){
	return new Date().getTime();
}

// setTimeoutの待機時間を算出する。
// startTimeから一定時間経過後にイベントを実行するために利用するsetTimeout指定時間を算出する。
function getWaitDuration(minTime, startTime){
	var duration = minTime - (getTime() - startTime);
	if(duration < 0){
		duration = 0;
  	};
  	return duration;
}

/**
 * 背景画像アップロード処理
 */
function uploadImageFile() {
	// 画面をブロック
    $.blockUI({ message: '<h3><img src="/images/wait.gif" style="width:35px;margin-right:10px;"/>アップロード中...</h3>' });
    var $form = $('#uploadForm');
    var fd = new FormData($form[0]);
    var start = getTime();
    $.ajax(
        '/dashboard/uploadImageFile',
        {
        type: 'post',
        processData: false,
        contentType: false,
        data: fd,
        dataType: "json",
        success: function(data) {
        	var duration = getWaitDuration(3000, start);
            setTimeout(function(){
	             // アップロードした画像ファイルを選択状態にする。
	            var src = data.src;
				$('#bgImage').val(src);
				$('#selected').attr('src', src);

				// 	アップロード結果がエラーの場合にはメッセージを表示する。
				if(data != null && data.status === "error"){
					alert(data.message);
				}
				// 画面ブロックの解除
            	$.unblockUI();
            }, duration);
        },
        error: function(XMLHttpRequest, textStatus, errorThrown) {
            // 画面ブロックの解除
			$.unblockUI();
            alert( "ファイルのアップロードに失敗しました。" );
            console.log(textStatus);
            console.log(errorThrown);
        }
    });
    return false;
}

/**
 * 背景画像削除処理
 */
function deleteImageFile() {
	// 画面をブロック
    $.blockUI({ message: '<h3><img src="/images/wait.gif" style="width:35px;margin-right:10px;"/>削除中...</h3>' });
    var $form = $('#deleteImageForm');
    var fd = new FormData($form[0]);
    var start = getTime();
    $.ajax(
        '/dashboard/deleteImageFile',
        {
        type: 'post',
        processData: false,
        contentType: false,
        data: fd,
        dataType: "json",
        success: function(data) {
        	var duration = getWaitDuration(1000, start);
            setTimeout(function(){
	            // 削除された画像が指定されていた場合には、背景タイプを「単色」に変更する。
	            var src = data.src;
	            var oldSrc = $('#bgImage').val();
				if(oldSrc === src){
					$('#bgImage').val("");
					$('#selected').attr('src', "");
					$('#bgTypeColor').prop('checked', true);
				}

				// 画面ブロックの解除
            	$.unblockUI();
            }, duration);
        },
        error: function(XMLHttpRequest, textStatus, errorThrown) {
            // 画面ブロックの解除
			$.unblockUI();
            alert( "ファイルのアップロードに失敗しました。" );
            console.log(textStatus);
            console.log(errorThrown);
        }
    });
    return false;
}

/**
 * 背景画像リスト読み込み処理
 */
function getImageFileList(cbSuccess, cbError){
	$.ajax(
		'/dashboard/getImageFileList',
		{
		type: 'post',
		processData: false,
		contentType: false,
		data: {},
		dataType: "json",
		success: cbSuccess,
		error: function(XMLHttpRequest, textStatus, errorThrown) {
		    console.log(textStatus);
		    console.log(errorThrown);
		    cbError();
		}
	});
	return false;
}

/**
 * 背景画像リスト読み込み成功時コールバック
 */
var cbLoadImageSuccess = function(data){

	// 画像の選択状態を解除する。
	$('div.jcarousel li').removeClass('opaque');
	$selectedImage = undefined;

	// 画像をダイアログにセットする。
	var images = data.images;
	var $imageHolder = $('#imageHolder');
	$imageHolder.empty();
	_.forEach(images, function(src){
		$imageHolder.append($('<li><img src="'+ src + '" width="200" height="150" alt=""></li>'));
	});
	$imageHolder.find('li').on('click', function(){
		$('div.jcarousel li').removeClass('opaque');
		$(this).addClass('opaque');
		$selectedImage = $(this);
	});

	// カルーセル情報をリロードする。
	carousel.jcarousel('reload');

	// カルーセルのページネーション情報を更新
	pagination.jcarouselPagination('reloadCarouselItems');
};

/**
 * 背景画像リスト読み込み成功時コールバック
 */
var cbLoadImageError = function(data){
	// 画像の選択状態を解除する。
	$('div.jcarousel li').removeClass('opaque');
	$selectedImage = undefined;

	// 画像をダイアログにセットする。
	var images = data.images;
	var $imageHolder = $('#imageHolder');
	$imageHolder.empty();

	// カルーセル情報をリロードする。
	carousel.jcarousel('reload');

	// カルーセルのページネーション情報を更新
	pagination.jcarouselPagination('reloadCarouselItems');

	alert('背景画像情報の取得に失敗しました。');
};

/**
 * 画像選択ダイアログを開く
 */
function showSelectImageDialog(){

	$("#selectImageDialog").dialog({
		title : "背景画像の選択",
		resizable: false,
		width: 740,
		height: 350,
		modal: true,
		open: function(){
		    // 非同期通信で背景画像リストを取得する。
		    getImageFileList(cbLoadImageSuccess, cbLoadImageError);
		},
		buttons: {
			"setAsBackgroundImage" : {
				text : "背景として設定する",
				id : "setAsBackgroundImage",
				click : function(){
					if($selectedImage === undefined){
						alert('画像が選択されていません');
						return false;
					}
					var src = $selectedImage.find('img').attr('src');
					$('#bgImage').val(src);
					$('#selected').attr('src', src);
					$(this).dialog("close");
				}
			},
			"キャンセル": function() {
				$(this).dialog("close");
			}
		}
	});
	return false;
}

/**
 * 画像削除ダイアログを開く
 */
function showDeleteImageDialog(){
	$("#selectImageDialog").dialog({
		title : "背景画像の削除",
		resizable: false,
		width: 740,
		height: 350,
		modal: true,
		open: function(){
		    // 非同期通信で背景画像リストを取得する。
		    getImageFileList(cbLoadImageSuccess, cbLoadImageError);
		},
		buttons: {
			"deleteImageButton" : {
				text : "画像を削除する",
				id : "deleteImageButton",
				click : function(){
					if($selectedImage === undefined){
						alert('画像が選択されていません');
						return false;
					}
					var src = $selectedImage.find('img').attr('src');
					$('#deleteImage').val(src);
					$(this).dialog("close");
					deleteImageFile();
				}
			},
			"キャンセル": function() {
				$(this).dialog("close");
			}
		}
	});
	return false;
}

// ファイルアップロードダイアログを開く
function showUploadDialog(){
	$("#fileUploadDialog").dialog({
	 	title: "ファイルアップロード",
		resizable: false,
		width: 500,
		modal: true,
		buttons: {
			"uploadButton" : {
				text : "アップロード",
				id : "uploadButton",
				// jquery-uiダイアログボタンが押下された時に、アップロードダイアログで定義した
				// 非表示状態のsubmitボタンを押す。
				click : function() {
					var uploadFile = $('#uploadFile').val();
					if(!uploadFile){
						alert('ファイルが指定されていません');
						return false;
					};
					$(this).dialog("close");
					uploadImageFile();
					// 設定されていたファイルをクリアする。
					// file要素の値はセキュリティー上設定できないので、要素を再生成する。
					$('#fileElementHolder').empty()
						.append($('<input type="file" id="uploadFile" name="uploadFile" accept="image/jpeg, image/gif, image/png"/>'));
				}
			},
			"cancelButton" : {
				text : "キャンセル",
				click : function() {
					// 設定されていたファイルをクリアする。
					// file要素の値はセキュリティー上設定できないので、要素を再生成する。
					$('#fileElementHolder').empty()
						.append($('<input type="file" id="uploadFile" name="uploadFile" accept="image/jpeg, image/gif, image/png"/>'));
					$(this).dialog("close");
				}
			}
		}
	});
	return false;
}

// カルーセルで選択されている画像
var $selectedImage;

function setUpColorPicker(){
	var checked = $('#bgTypeColor').prop('checked');
	if(checked){
		$('input[name="bgRepeatType"]').attr("disabled", "disabled");
		$('#selected').unbind('click', showSelectImageDialog);
		$('#selected').addClass("opaque");
		$('#Binded').removeAttr("disabled");
		$('#Binded').removeClass("opaque");
		$('#forBgColor span.Image').show();
	} else {
		$('input[name="bgRepeatType"]').removeAttr("disabled");
		$('#selected').bind('click', showSelectImageDialog);
		$('#selected').removeClass("opaque");
		$('#Binded').attr("disabled", "disabled");
		$('#Binded').addClass("opaque");
		$('#forBgColor span.Image').hide();
	}
}

function init(){
	setUpValidation();
    // category.jsとcategoryDialog.ejsをpartialで取り込み、
    // setUpCategoryを実行する。
    setUpCategory();
}

// エラーチェックバリデーター
var validator;

function setUpValidation(){
	jQuery.validator.addMethod("plus1",
		function(value, element) {
			return this.optional(element) || /^([1-9][0-9]*)$/.test(value);
		}
	);
	validator = $("form").validate({
		onfocusout: function(element) { $(element).valid(); },
		rules: {
			width :{
				required: true,
				digits: true,
				minlength: 3
			},
			height :{
				required: true,
				digits: true,
				minlength: 3
			},
			bgSepV :{
				required: true,
				plus1 : true
			},
			bgSepH :{
				required: true,
				plus1 : true
			},
			bgSepLineWidth :{
				required: true,
				plus1 : true
			}
		},
		messages: {
			width :{
				required: "数値を入力して下さい",
				digits: "数値を入力して下さい",
				minlength: "100以上の数値を指定してください"
			},
			height :{
				required: "数値を入力して下さい",
				digits: "数値を入力して下さい",
				minlength: "100以上の数値を指定してください"
			},
			bgSepV :{
				required: "1以上の数値を入力して下さい",
				plus1: "1以上の数値を入力して下さい"
			},
			bgSepH :{
				required: "1以上の数値を入力して下さい",
				plus1: "1以上の数値を入力して下さい"
			},
			bgSepLineWidth :{
				required: "1以上の数値を入力して下さい",
				plus1: "1以上の数値を入力して下さい"
			}
		}
	});
}

// カルーソルオブジェクト
var carousel;

// カルーソルページネーションオブジェクト
var pagination;

(function($) {
    $(function() {
    	// カルーソルを保持する。
		carousel = $('.jcarousel').jcarousel();
	    $('.jcarousel-control-prev')
	        .on('jcarouselcontrol:active', function() {
	            $(this).removeClass('inactive');
	        })
	        .on('jcarouselcontrol:inactive', function() {
	            $(this).addClass('inactive');
	        })
	        .jcarouselControl({
	            target: '-=1'
	        });
	    $('.jcarousel-control-next')
	        .on('jcarouselcontrol:active', function() {
	            $(this).removeClass('inactive');
	        })
	        .on('jcarouselcontrol:inactive', function() {
	            $(this).addClass('inactive');
	        })
	        .jcarouselControl({
	            target: '+=1'
	        });
	    $('.jcarousel-pagination')
	        .on('jcarouselpagination:active', 'a', function() {
	            $(this).addClass('active');
	        })
	        .on('jcarouselpagination:inactive', 'a', function() {
	            $(this).removeClass('active');
	        })
	        .jcarouselPagination();

		pagination = $('.jcarousel-pagination');

       $('#Binded').jPicker();
       $('#Binded2').jPicker();

		$("#errorDialog").dialog({autoOpen: false});
		$("#selectImageDialog").dialog({ autoOpen: false });
		$("#fileUploadDialog").dialog({ autoOpen: false });
		setUpColorPicker();
		$('input[name="bgType"]').click(setUpColorPicker);

		// 「画像のアップロード」ボタン押下時にダイアログを開く
		$('#uploadDialogButton').click(showUploadDialog);

		// 「画像の削除」ボタン押下時にダイアログを開く
		$('#deleteDialogButton').click(showDeleteImageDialog);

		// ファイルが選択されている場合にのみ、「アップロード」ボタンを活性化する。
		$('#uploadFile').change(function(){
			if($('#uploadFile').val()){
				$('#uploadButton').removeAttr('disabled')
					.removeClass('disabledButton');
			} else {
				$('#uploadButton').attr('disabled', true)
					.addClass('disabledButton');
			}
		});
		initTicketData();
    });
})(jQuery);

</script>
<style>
.fileUpload {
	margin: 10px;
}

.disabledButton {
	color: gray;
}

.opaque {
  opacity: 0.5;
}

.selected {
border: 15px solid orange;
box-sizing: border-box;
}
.jcarousel-wrapper {
    margin: 20px auto;
    position: relative;
    border: 10px solid #fff;
    -webkit-border-radius: 5px;
       -moz-border-radius: 5px;
            border-radius: 5px;
    -webkit-box-shadow: 0 0 2px #999;
       -moz-box-shadow: 0 0 2px #999;
            box-shadow: 0 0 2px #999;
}

/** Carousel **/

.jcarousel {
    position: relative;
    overflow: hidden;
    /*width: 600px;*/
    width: 100%;
    height: 150px;
}

.jcarousel ul {
    width: 20000em;
    position: relative;
    list-style: none;
    margin: 0;
    padding: 0;
}

.jcarousel li {
    float: left;
}

/** Carousel Controls **/

.jcarousel-control-prev,
.jcarousel-control-next {
    position: absolute;
    top: 60px;
    width: 30px;
    height: 30px;
    text-align: center;
    background: #4E443C;
    color: #fff;
    text-decoration: none;
    text-shadow: 0 0 1px #000;
    font: 24px/27px Arial, sans-serif;
    -webkit-border-radius: 30px;
       -moz-border-radius: 30px;
            border-radius: 30px;
    -webkit-box-shadow: 0 0 2px #999;
       -moz-box-shadow: 0 0 2px #999;
            box-shadow: 0 0 2px #999;
}

.jcarousel-control-prev {
    left: -50px;
}

.jcarousel-control-next {
    right: -50px;
}

.jcarousel-control-prev:hover span,
.jcarousel-control-next:hover span {
    display: block;
}

.jcarousel-control-prev.inactive,
.jcarousel-control-next.inactive {
    opacity: .5;
    cursor: default;
}

/** Carousel Pagination **/

.jcarousel-pagination {
    position: absolute;
    bottom: 0;
    left: 15px;
}

.jcarousel-pagination a {
    text-decoration: none;
    display: inline-block;

    font-size: 11px;
    line-height: 14px;
    min-width: 14px;

    background: #fff;
    color: #4E443C;
    border-radius: 14px;
    padding: 3px;
    text-align: center;

    margin-right: 2px;

    opacity: .75;
}

.jcarousel-pagination a.active {
    background: #4E443C;
    color: #fff;
    opacity: 1;
    text-shadow: 0 -1px 0 rgba(0, 0, 0, 0.75);
}
.multiText{
	font-size: 16px;　/* iphoneで拡大表示を回避 */
}
</style>
<div class="container theme-showcase" role="main">
<form name="main" method="POST">
<input type="hidden" name="id" value="<%= id %>"/>
<input type="hidden" id="bgImage" name="bgImage" value="<%= bgImage %>"/>
<input type="hidden" id="ticketData" name="ticketData" value=""/>
<input type="hidden" name="selectedId" value="<%= selectedId %>" />
<div class="panel panel-default">
	<div class="panel-heading">基本設定</div>
	<div class="panel-body">
		<div class="form-group">
			<label for="category">カテゴリ</label>
			<select id="category" name="category" class="multiText form-control">
			</select>
		</div>
		<div class="form-group">
			<label for="title">タイトル</label>
			<input class="multiText form-control"  name="title" id="title" placeholder="ボードのタイトルを修正してください。" value="<%= title %>">
		</div>
		<div class="form-group">
			<label for="description">説明</label>
			<textarea class="multiText form-control" rows="4" name="description" id="description" placeholder="ボードの説明を修正してください。"><%= description %></textarea>
		</div>
		<div class="row">
			<div class="col-sm-3">
				<div class="form-group">
					<label for="width">幅</label>
					<input class="multiText form-control"  name="width" id="width" value="<%= width %>"/>
				</div>
			</div>
			<div class="col-sm-3">
				<div class="form-group">
					<label for="height">高さ</label>
					<input class="multiText form-control"  name="height" id="height" value="<%= height %>"/>
				</div>
			</div>
		</div>
	</div>
</div>
<div class="panel panel-default">
	<div class="panel-heading">背景</div>
	<div class="panel-body" style="margin-left:10px">
		<div class="row">
			<div class="col-sm-12">
				<div class="form-group" style="padding-left:5px">
					<div class="radio">
						<input type="radio" value="color" name="bgType" id="bgTypeColor" <% if(bgType==='color'){%>checked<% } %>/>
						<label for="bgTypeColor">単色</label>
					</div>
					<div id="forBgColor">
						<input id="Binded" name="bgColor" type="text" value="<%= bgColor %>" />
					</div>
				</div>
			</div>
		</div>
		<div class="row">
			<div class="col-sm-12">
				<div class="form-group" style="padding-left:5px">
					<div class="radio">
						<input type="radio" value="image" name="bgType" id="bgTypeImage" <% if(bgType==='image'){%>checked<% } %>/>
						<label for="bgTypeImage">画像</label>
					</div>
					<div>
						<img id="selected" src="<%= bgImage %>" style="margin-bottom:10px;width:200px;height:150px;border:2px solid gray;"></img>
					</div>
					<div>
						<button id="uploadDialogButton" class="btn btn-default" style="margin-bottom:15px">画像のアップロード</button>
						<button id="deleteDialogButton" class="btn btn-default" style="margin-bottom:15px">画像の削除</button>
					</div>
					<div style="margin:5px;">
						<label>繰り返しのタイプ</label><br>
						<div style="margin:3px">
							<div class="radio-inline">
								<input type="radio" value="no-repeat" name="bgRepeatType" id="repeatNone" <% if(bgRepeatType==='no-repeat'){%>checked<% } %>/>
								<label for="repeatNone">なし</label>
							</div>
							<div class="radio-inline">
								<input type="radio" value="repeat" name="bgRepeatType" id="repeatXY" <% if(bgRepeatType==='repeat'){%>checked<% } %>/>
								<label for="repeatXY">縦横方向</label>
							</div>
							<div class="radio-inline">
								<input type="radio" value="repeat-y" name="bgRepeatType" id="repeatY" <% if(bgRepeatType==='repeat-y'){%>checked<% } %>/>
								<label for="repeatY">縦方向</label>
							</div>
							<div class="radio-inline">
								<input type="radio" value="repeat-x" name="bgRepeatType" id="repeatX" <% if(bgRepeatType==='repeat-x'){%>checked<% } %>/>
								<label for="repeatX">横方向</label>
							</div>
							<div class="radio-inline">
								<input type="radio" value="cover" name="bgRepeatType" id="cover" <% if(bgRepeatType==='cover'){%>checked<% } %>/>
								<label for="cover">拡大</label>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>
<div class="panel panel-default">
	<div class="panel-heading">分割</div>
	<div class="panel-body">
		<div class="row">
			<div class="col-sm-3">
				<div class="form-group">
					<label for="bgSepV">縦方向分割数</label>
					<input class="multiText form-control" type="text"  name="bgSepV" id="bgSepV" value="<%= bgSepV %>"/>
				</div>
			</div>
			<div class="col-sm-3">
				<div class="form-group">
					<label for="bgSepH">横方向分割数</label>
					<input class="multiText form-control" type="text" name="bgSepH" id="bgSepH" value="<%= bgSepH %>"/>
				</div>
			</div>
		</div>
		<div class="row">
			<div class="col-sm-3">
				<div class="form-group">
					<label for="bgSepLineWidth">線の幅</label>
					<input class="multiText form-control" type="text" name="bgSepLineWidth" id="bgSepLineWidth" value="<%= bgSepLineWidth %>"/>
				</div>
			</div>
			<div class="col-sm-3">
				<div class="form-group">
					<label for="bgSepLineColor">線の色</label>
					<div id="multiText forLineColor">
						<input class="multiText" id="Binded2" name="bgSepLineColor" type="text" value="<%= bgSepLineColor %>" />
					</div>
				</div>
			</div>
		</div>
	</div>
</div>
<div class="panel panel-default">
	<div class="panel-heading">付箋種類</div>
	<div class="panel-body">
		<div class="row">
			<div class="col-sm-12">
				<table class="table table-bordered table-hover table-condensed">
					<thead>
						<tr>
							<th style="width:40px;text-align:center;vertical-align:middle;"><!--<input type="checkbox"/>--></th>
							<th style="vertical-align:middle;">タイプ</th>
							<th style="width:400px;vertical-align:middle;">表示文字列</th>
						</tr>
					</thead>
					<tbody class="multiText">
						<%- ticketTypeList %>
					</tbody>
				</table>
			</div>
		</div>
	</div>
</div>
<button type="button" class="btn btn-default" onclick="save()" >保存</button>
<button type="button" class="btn btn-default" onclick="cancel()"/>キャンセル</button>
</div>
</form>
</div>
<div id="selectImageDialog">
	<div class="wrapper" style="width:620px;margin-left:40px;">
        <div class="jcarousel-wrapper">
            <div class="jcarousel">
                <ul id="imageHolder"></ul>
            </div>
            <a href="#" class="jcarousel-control-prev">&lsaquo;</a>
            <a href="#" class="jcarousel-control-next">&rsaquo;</a>
            <p class="jcarousel-pagination"></p>
        </div>
    </div>
</div>
<div id="errorDialog">
  <p>
    入力値が正しくありません。
  </p>
</div>
<div id="fileUploadDialog">
	<form id="uploadForm" name="uploadForm"
		enctype="multipart/form-data"
		action="/dashboard/upload"
		method="post">
		<div class="fileUpload">
			<input type="hidden" name="selectedId" value="<%= id %>"/>
			<span id="fileElementHolder">
				<input type="file" id="uploadFile" name="uploadFile" accept="image/jpeg, image/gif, image/png"/>
			</span>
			<input type="submit" id="upload" value="アップロード" style="display:none;" />
		</div>
	</form>
</div>
<form id="deleteImageForm">
	<input type="hidden" id="deleteImage" name="deleteImage"/>
</form>
<%- partial('../categoryDialog.ejs') %>
