<meta http-equiv="Cache-Control" content="no-cache">
<script src="/js/jquery-2.1.1.min.js"></script>
<script src="/js/jquery-ui.min.js"></script>
<script src="/js/underscore-min.js"></script>
<link rel="stylesheet" href="/css/ticketAppearance.css?date=20131019">
<script>

  function T(){
    var self = this;

    this.encode1 = function encode1(input){
      var ret = input;
      ret=ret.replace(/&/g, "&amp;");
      ret=ret.replace(/</g, "&lt;");
      ret=ret.replace(/>/g, "&gt;");
      ret = self.NLtoBR(ret);
      return ret;
    };

    this.encode2 = function encode2(input){
      var ret = input;
      ret=self.BRtoNL(ret);
      ret=ret.replace(/</g, "&lt;");
      ret=ret.replace(/>/g, "&gt;");
      return ret;
    };

    this.BRtoNL = function BRToNL(input){
      var ret = input;
      ret=ret.replace(/<br\s*[\/]?>/gi, "\n");
      return ret;
    };

    this.NLtoBR = function NLtoBR(input){
      var ret = input;
      ret=ret.replace(/\r\n/g, '<br />');
      ret=ret.replace(/\r/g, '<br />');
      ret=ret.replace(/\n/g, '<br />');
      return ret;
    }
  }

  var t = new T();

  function home(){
    submit("/dashboard/index");
  }

  function back(){
    submit("/dashboard/index");
  }

  // チケット削除
  function destroyTicket(id){
    console.log("destroyTicket:" + id);
    io.socket.get('/board/process/', {actionType:"destroy", boardId : '<%= boardId %>', id: id});
  }

  // チケット更新
  function updateTicket(id){
    console.log("updateTicket:"+id);
    var newContents = $('#ta_'+id).val();
    io.socket.get('/board/process/', {actionType:"update", boardId : '<%= boardId %>', id: id, contents: newContents});
  }

  // チケット作成
  function createTicket(x, y, color){
    console.log("createTicket:" + x + "," + y);
    io.socket.get('/board/process/',
    {actionType:"create",
     contents: "",
     positionX: x + "px",
     positionY: y + "px",
     color: color,
     boardId : '<%= boardId %>',
     userId : '<%= loginInfo.userId %>'});
  }

  function createTicketByButton() {
    var type = $('#selectTicketType').val();
    createTicket(10, 10, type);
  }

  function make(data) {
   var val = data["contents"];
   var nickname = data["nickname"];
   var sticky = $('<div class="sticky"><div class="ttl"><span class="userInfo"></span><span class="cdate"></span><div class="close"><i class="glyphicon glyphicon-trash" /></div><div class="contentsArea"></div></div>');
   val=t.NLtoBR(val);

   sticky.find('.userInfo').text(nickname);

   //年・月・日・曜日を取得する
   var d = new Date(data["createdAt"]);
   console.log(d);
//   var year = d.getFullYear();
   var month = d.getMonth()+1;
   var week = d.getDay();
   var day = d.getDate();
   var hour = d.getHours();
   var minute = d.getMinutes();
   var yobi= new Array("日","月","火","水","木","金","土");
   sticky.find('.cdate').text("　　<"+month+"/"+day+"("+yobi[week]+") "+hour+":"+minute+">");
   sticky.find('.contentsArea').html(val);
   sticky.appendTo('#board')
      .attr('id', "ticket_"+data["id"])
      .attr('data-id', data["id"])
      .addClass(data["color"])
      .addClass(data["color"]+"_shadow")
      .animate({left: data["positionX"], top: data["positionY"] })
      .draggable({stop: updateFusenListener})
      .click(function(e) {
        // console.log("付箋クリックイベント発生");
      })
      .bind("dblTap",function(){
        if(sticky.data("editing")){
            return false;
        };
        sticky.data("editing", true);
        var $self = $(this).find('.contentsArea');
        var id0 = data["id"];
        var c = $self.html();
        c=t.encode2(c);
        $self.html('<textarea style="margin:0px;width:214px;height:142px;font-size:12px;">' + c + '</textarea>').addClass('contents_edit')
          .children()
          .focus()
          .blur(function() {
          sticky.data("editing", false);
          var c2 = $(this).val();
          c2 = t.encode1(c2);
          $(this).parent().html(c2);
          var $sticky = $self.closest('.sticky');
          updateFusen($sticky);
        });
      }).mousedown(function() {                              // 付箋をマウスクリック
        $('.selected').each(function(i, elm) {                  // 選択中選択枠を持つ付箋に影を付ける。
          var regExp = new RegExp("ticket");
          var type = elm.className.split(" ");
          for (var i=1 ; i<=type.length ; i++){
            if ( type[i].match(regExp).length !== null){
              $(elm).addClass(type[i]+"_shadow")
              break;
            }
          }
      });
        $('.sticky').removeClass('selected');                    // すべての付箋の選択枠を外す。
        $(this).addClass('selected');                            // クリックした付箋に選択枠を設定する。
        $(this).removeClass(data["color"]+"_shadow");            // クリックした付箋の影を外す。
      })
      .mousedown(function() {                              // 'X'をマウスクリック
        sticky.find('.close').click(function(){
        confirmDeleteTicket(data["id"]);
      })
    });
    return sticky;
  }

  // 付箋更新処理を呼び出すリスナ
  function updateFusenListener() {
    updateFusen($(this));
  }

  // 付箋更新処理
  function updateFusen($target) {
    var newData = {};
    newData["actionType"] = "update";
    newData["boardId"] = '<%= boardId %>';
    newData["id"] = $target.data('id');
    newData["positionX"] = $target.css('left');
    newData["positionY"] = $target.css('top');
    var cc = $target.find(".contentsArea").html();
    cc=t.BRtoNL(cc);
    newData["contents"] = cc;
    console.dir(newData);
    io.socket.get('/board/process/', newData);
  }

function confirmDeleteTicket(id){
  $("#confirmDeleteTicket").dialog({
      modal: true,
      resizable: false,
      draggable: false,
      open: function(){
      	var focusButton = $(".ui-dialog-buttonset>button:nth-child(2)");
      	focusButton.focus();
      },
      buttons: {
        "はい": function() {
          $(this).dialog("close");
          destroyTicket(id);
        },
        "いいえ": function() {
          $(this).dialog("close");
          return false;
        }
      }
    });
}

// 付箋移動処理
function moveTicket(ticketId, dstBoardId){
	console.log('ticketid['+ticketId+']');
	var newData = {};
    newData["actionType"] = "move";
    newData["boardId"] = '<%= boardId %>';
    newData["dstBoardId"] = dstBoardId;
    newData["id"] = ticketId;
    newData["nickname"] = '<%= loginInfo.userName %>';
    io.socket.get('/board/process/', newData);

}

function showMoveTicketDialog(ticketId){
  $("#selectBoardDialog").dialog({
      modal: true,
      resizable: false,
      draggable: false,
      buttons: {
        "移動": function() {
          $(this).dialog("close");
          var dstBoardId = $('#dstBoardId').val();
          moveTicket(ticketId, dstBoardId);
        },
        "キャンセル": function() {
          $(this).dialog("close");
          return false;
        }
      }
    });
}

function setUpCanvas(){
	var height = <%= height %>;
	var width = <%= width %>;
	var vsep = <%= bgSepV %>;
	var hsep = <%= bgSepH %>;
	var lineWidth = <%= bgSepLineWidth %>;
	var lineColor = "#<%= bgSepLineColor %>";
	var canvas = $('#mycanvas')[0];
	if (canvas.getContext) {
		var context = canvas.getContext('2d');
		context.lineWidth = lineWidth;
		context.strokeStyle = lineColor;
		var stepY = height/vsep;
		for(var y = stepY; y < height; y+= stepY) {
			context.moveTo(0,y);
			context.lineTo(width,y);
		}
		var stepX = width/hsep;
		for(var x = stepX; x < width; x+= stepX) {
			context.moveTo(x,0);
			context.lineTo(x,height);
		}
		context.stroke();
	}
}


  // jQueryオンロード処理
  $(function(){

  setUpCanvas();

  $("body").contextmenu({
    delegate: ".hasmenu",
    ticketId : undefined,
    menu: [],
        beforeOpen: function(event, ui) {
        var $menu = ui.menu,
            $target = ui.target;
            var sticky = $target.closest('.sticky');
			console.log("sticky:["+sticky.html()+"]");
            if(sticky.html() != undefined){
            	ticketId = sticky.attr('data-id');
            	  $("body").contextmenu("replaceMenu",
            	   [{title: "移動", cmd: "move"}]);
            } else {
            	 $("body").contextmenu("replaceMenu",
            	   [
                     {title: "作成", children: [
                          <%- contextMenu %>
			            ]
			         }
			       ]
			     );
	        }
    },
    select: function(event, ui) {
    	var cmd = ui.cmd;
    	console.log("CMD:["+cmd+"]");
    	if(cmd === "move"){
    		showMoveTicketDialog(ticketId);
    	} else {
	        var $menu = $('ul.ui-menu');
        var top = $('#board').offset().top;
        var left = $('#board').offset().left;
        var posX = $menu.offset().left - left;
        var posY = $menu.offset().top - top;
	createTicket(posX, posY, ui.cmd);
    }
    }
  });

    // 付箋データ
    var ticketData = <%- JSON.stringify(ticketData) %>;

    // 付箋データから付箋を作成し、ボードに追加。
    for(var i = 0; i < ticketData.length; i++){
      var data = ticketData[i];
      var sticky = make(data);
      $('#board').append(sticky);
    }

    console.log("リスナ登録");
    io.socket.get('/board/register/',{boardId : '<%= boardId %>'});

    // メッセージ受信時に呼び出される関数
    io.socket.on('message', function(data) {
      console.log("メッセージ受信", data);
      var id = data["id"];
      var action = data['action'];
      console.log("action["+action+"]");
      if(action == "created"){
        console.log("チケットを作成します");
        var ms = "<tr id='"+id+"'>"
                +"<td>"+id+"</td>"
                +"<td><input type='button' onclick='destroyTicket("+id+")' value='削除'/></td>"
                +"<td><input type='button' onclick='updateTicket("+id+")' value='更新'/></td>"
                +"<td>"+data["boardId"]+"</td>"
                +"<td>"+data["createUser"]+"</td>"
                +"<td>"+data["nickname"]+"</td>"
                +"<td><textarea id='ta_"+id+"'>"+data["contents"]+"</textarea></td></tr>";

        $('#tickets').append(ms);

        var sticky = make(data);
        $('#board').append(sticky);

      } else if(action == "updated"){
        console.log("チケットを更新します:"+data["id"]+","+data["contents"]);
        $('#ta_'+data["id"]).val(data["contents"]);
        var $sticky = $(".sticky[data-id='"+data['id']+"']");
        // 他ユーザーがチケットを動かす前に編集フラグをfalseにする。
		$sticky.data("editing", false);
        $sticky.animate({'left': data["positionX"], 'top': data["positionY"]});
        var ccc = data["contents"];
        ccc=t.NLtoBR(ccc);
        $sticky.find(".contentsArea").html(ccc);
      } else if(action == "destroyed"){
        console.log("チケットを削除します:"+data["id"]);
        console.dir(data);
        $('tr#'+data["id"]).remove();
        $(".sticky[data-id='"+data['id']+"']").remove();
      } else if(action == "enter"){
      	console.log("ユーザーが入室しました:"+JSON.stringify(data));
      	updateUserList(data);
      } else if(action == "leave"){
      	console.log("ユーザーが退室しました:"+JSON.stringify(data));
      	updateUserList(data);
      }
    });
});

/**
 * 配列内容が一致しているかを判定する。
 *  *** match() はjsに存在するメソッドのためmatchAに変更
 */
function matchA(array1, array2){
	console.log("配列内容比較");
	console.log(array1);
	console.log(array2);
	if(array1.length !== array2.length){
		return false;
	}
	for(var i = 0; i < array1.length; i++){
		if(array1[i] !== array2[i]){
			return false;
		}
	}
	return true;
}

/*
 * 表示中ユーザーと利用中ユーザーリストの整合性をチェックする。
 *
 * 整合条件は以下の状況
 * 入室の場合: （入室中ユーザー一覧）= (表示中ユーザー一覧) + 入室ユーザー
 * 退室の場合: （入室中ユーザー一覧）+ 退室ユーザー = (表示中ユーザー一覧)
 */
function checkConsistencyOfUserList(action, displayUsers, users, userId){
	var lhs, rhs;
	if(action === "enter"){
		lhs = _.sortBy(users);
		rhs = _.sortBy(displayUsers.concat([userId]));
	} else if(action === "leave"){
		lhs = _.sortBy(users.concat([userId]));
		rhs = _.sortBy(displayUsers);
	} else {
		return false;
	}
    return matchA(lhs, rhs);
}

/**
 * ユーザー一覧を更新する。
 */
function updateUserList(data){
	console.log("ユーザー一覧更新");

	// 一覧に追加するユーザーの作成
	function getNewUser(userId){
		var $ret = $("<div></div>")
			.attr("id", "id_" + userId)
			.addClass("userInList");
		$ret.append($("<img src='/images/people.png' style='width:30px;margin-right:5px;' />"));
		$ret.append($('<span class="userName">'+userId+'</span>'));
		return $ret;
	}

	// 入室ユーザー表示時のアニメーション効果
	function animateEnteringUser($user){
		$user.fadeIn('slow');
		$user.animate({ backgroundColor: "#7fffd4", fontWeight: "bold"}, 500)
			.animate({ backgroundColor: "#000000",fontWeight: "normal" }, 1000);
	}

	var action = data["action"];

	// 入室中ユーザー一覧
	var users = data["users"];

	// 入退出ユーザー
	var userId = data["userId"];

	// 表示中ユーザー一覧
	var userList = $("#userList .userInList");
	var displayUsers = _.map(userList, function(item){
		return $(item).find(".userName").text();
	});

	// 表示中ユーザーと利用中ユーザーリストが不整合、もしくは、自ユーザーのみ利用の場合リフレッシュ

 	// ユーザー一覧リフレッシュフラグ
 	var refreshUserList = !checkConsistencyOfUserList(action, displayUsers, users, userId);

	// 初期表示時には全利用ユーザーを追加する。
	if(refreshUserList || displayUsers.length == 0){
		console.log("ボード利用ユーザー一覧を再表示");
		$('#userList').hide()
			.empty();
		_.forEach(users, function(user){
			var $userToAdd = getNewUser(user);
			$('#userList').append($userToAdd);
		});
		$('#userList').fadeIn('slow')
	} else {
		// 他ユーザーが入室した場合
		if(action === "enter"){
			// 入室したユーザーの追加場所を探索
			// （利用ユーザーリスト内で入室ユーザーの１つ前のユーザーIDを取得）
			var prev;
			for(var i = 0; i < users.length - 1; i++){
				if(users[i + 1] === userId){
					prev = users[i];
				}
			}

			// 入室ユーザー要素の作成
			var $userToAdd = getNewUser(userId);
			$userToAdd.hide();
			var found;
			if(prev !== undefined){
				// 追加場所の次に入室ユーザー要素を追加
				found = $("#id_"+prev);
				found.after($userToAdd);
				animateEnteringUser($userToAdd);
			} else {
				// 追加場所が未定義の場合には先頭に追加
				found = $(userList[0]);
				found.before($userToAdd);
				animateEnteringUser($userToAdd);
			}
		}
		// 他ユーザーが退出した場合
		if(action ==="leave"){
			var found = $("#id_"+userId);
			found.fadeOut('slow', function(){
				found.remove();
			});
		}
	}

}

</script>
<style>
.userInList{
	color: white;
	font-size: 14px;
	margin:5px;
}

#userList {
	z-index: 10000;
	position: fixed;
	bottom: 10px;
	right: 10px;
	width: 200px;
	background-color: black;
	opacity: 0.5;
	border: 5px gray solid;
	padding: 3px;
	border-radius: 10px;
    -webkit-border-radius: 10px;
    -moz-border-radius: 10px;
}

table th {
  background-color:#dfd;
}

#info th {
  width:150px;
  text-align:left;
}

/* 付箋スタイル（共通部分） */
.sticky {
  position: absolute;
  cursor: pointer;
  font-size:16pt;
}

.userInfo {
  position: static;
  height:20px;
  top: 3px;
  left:20px;
  float:left;
  font-size:12px;
  text-align: left;
  line-height: 20px;
  color:gray;
  font-family: "Meiryo UI",serif;
}

.cdate {
  position: static;
  height:20px;
  top: 3px;
  left:20px;
  float:left;
  font-size:12px;
  text-align: right;
  line-height: 20px;
  color:gray;
  font-family: "Meiryo UI",serif;
}

.close {
  position:static;
  top:12px;
  right:30px;
}

.contentsArea {
  position: absolute;
  top:20px;
  left:20px;
  clear: both;
  font-size:12px;
  font-family: "Meiryo UI",serif;
}

contentsText{
	  margin: 0px;
	  width:205px;
	  height:142px;
	  font-size:12px;
	  font-family: "Meiryo UI",serif;
	}


.sticky textarea {
  top:30px;
  left:15px;
  font-size: 10pt;
  font-family: "Meiryo UI",serif;
}

/* 付箋スタイル（個別部分） */
.sticky {
  position: absolute;
  cursor: pointer;
  font-size:16pt;
}
/*
.userInfo {
  position: absolute;
  height:20px;
  top: 18px;
  left:20px;
  float:left;
  font-size:12px;
  color:gray;
  font-family: "Meiryo UI",serif;
}

.close {
  position:absolute;
  top:12px;
  right:30px;
}

.contentsArea {
  position: absolute;
  top:42px;
  left:20px;
  clear: both;
  font-size:12px;
  font-family: "Meiryo UI",serif;
}
*/
.sticky textarea {
  top:42px;
  left:15px;
  font-size: 10pt;
  font-family: "Meiryo UI",serif;
}

.selected {
  z-index:100;
  box-shadow: rgba(0,0,0,0.3) 0px 3px 7px 4px;
  -webkit-box-shadow: rgba(0,0,0,0.3) 0px 3px 7px 4px;
  -moz-box-shadow: rgba(0,0,0,0.3) 0px 3px 7px 4px;
}

.hasmenu {
z-index:0;
/*
  border: 1px solid #008;
  margin: 3px;
  padding: 5px;
  width: 30px;
*/
}

.ui-widget{
  font-size: 1em;
}

.ui-menu {
  width: 160px;
  z-index:1000;
}

#mycanvas {
  <%= canvasAppearance %>
}

#board {
  <%= boardAppearance %>
}

</style>
<div class="customContainer theme-showcase" role="main">
  <h3><%= title %></td></h3>
  <h4 style="margin:10px;"><%= description %></h4>

<form method="POST">
  <input type="hidden" name="boardId" value="<%= boardId %>" />
  <input type="hidden" name="userId" value="<%= loginInfo.userId %>" />
<div>
<div class="row">
  <div style="width:200px;margin:10px;">
    <div class="input-group">
   <select id="selectTicketType" name="selectTicketType" class="form-control">
		<%- comboMenu %>
   </select>
      <div class="input-group-btn">
        <button id="createTicketButton" type="button" class="btn btn-default" onclick="createTicketByButton();">作成</button>
      </div><!-- /btn-group -->
    </div><!-- /input-group -->
  </div><!-- /.col-lg-6 -->
</div><!-- /.row -->
<canvas id="mycanvas" width="<%= width %>" height="<%= height %>" style="position:absolute;"></canvas>
<div id="board" class="hasmenu">
</div>
<div id="userList" class="userList" style="display:none"></div>
</div>
<input type="button" style="margin:10px;" value="デバッグ情報" onclick="$('#debugTable').toggle();"/>
<div id="debugTable" style="display:none">
	<table id="tickets" border="1">
	  <tr>
	    <th>ID</th>
	    <th>削除</th>
	    <th>更新</th>
	    <th>ボードID</th>
	    <th>ユーザーID</th>
	    <th>ニックネーム</th>
	    <th>内容</th>
	  </tr>
	<% for( var i in list ) {%>
	  <tr id="<%= list[i].id %>">
	     <td><%= list[i].id %></td>
	     <td><input type="button" onclick="destroyTicket(<%= list[i].id %>)" value="削除"/></td>
	     <td><input type="button" onclick="updateTicket(<%= list[i].id %>)" value="更新"/></td>
	     <td><%= list[i].boardId %></td>
	     <td><%= list[i].createUser %></td>
	     <td><%= list[i].nickname %></td>
	     <td><textarea id="ta_<%= list[i].id %>"><%= list[i].contents %></textarea></td>
	  </tr>
	<% } %>
	</table>
</div>
</form>
</div>
<!-- 付箋削除の確認ダイアログ -->
<div id="confirmDeleteTicket" title="付箋削除の確認" style="display:none">
  <p>
    <span class="ui-icon ui-icon-circle-check" style="float:left; margin:0 7px 30px 0;"></span>
    付箋を削除します。よろしいですか？
  </p>
</div>
<!-- 移動先ボード選択ダイアログ -->
<div id="selectBoardDialog" title="移動先ボード選択" style="display:none">
  <p>
    <span class="ui-icon ui-icon-circle-check" style="float:left; margin:0 7px 30px 0;"></span>
    移動先ボードを選択してください。
    <select id="dstBoardId" style="width:100%">
    <% for( var i in boardList ) {%><option value="<%= boardList[i].id %>"><%= boardList[i].title %></option><% } %>
    </select>
  </p>
</div>
