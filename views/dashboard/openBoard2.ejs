<meta http-equiv="Cache-Control" content="no-cache">
<script src="/js/jquery-2.1.1.min.js"></script>
<script src="/js/jquery-ui.min.js"></script>
<script src="/js/underscore-min.js"></script>
<script src="/js/underscore.string.min.js"></script>
<link rel="stylesheet" href="/css/ticketAppearance.css?date=20131019">
<script>

  //----------------------------
  var debugPanel = true;

  function getTimestamp(){
    var d = new Date();
    var year = d.getFullYear();
    var month = d.getMonth()+1;
    var week = d.getDay();
    var day = d.getDate();
    var hour = _.str.lpad(d.getHours(), 2 ,'0');
    var minute = _.str.lpad(d.getMinutes(), 2, '0');
    var second = _.str.lpad(d.getSeconds(), 2, '0');
    var millisecond = _.str.lpad(d.getMilliseconds(), 3, '0');
    return year + "/" + month + "/" + day + " " + hour + ":" + minute + ":" + second + "." + millisecond;
  };

  $(function(){
    $('#debugClear').click(function(){
      $('#debugConsole').val("");
    });
  });

  function log(message){
    console.log(message);
    if(debugPanel){
      var $console = $('#debugConsole');
      $console.val($console.val()+"\r\n"+getTimestamp()+": "+message);
      $console.animate({scrollTop: $console[0].scrollHeight}, 'fast');
    }
  }

  //----------------------------

  function T(){
    var self = this;

    this.encode1 = function encode1(input){
      var ret = input;
      ret=ret.replace(/&/g, "&amp;");
      ret=ret.replace(/</g, "&lt;");
      ret=ret.replace(/>/g, "&gt;");
      ret = self.URLtoLINK(ret);
      ret = self.NLtoBR(ret);
      return ret;
    };

    this.encode2 = function encode2(input){
      var ret = input;
      ret=self.LINKtoURL(ret);
      ret=self.BRtoNL(ret);
      ret=ret.replace(/</g, "&lt;");
      ret=ret.replace(/>/g, "&gt;");
      return ret;
    };

    this.BRtoNL = function BRToNL(input){
      var ret = input;
      ret=ret.replace(/<br\s[^>]*>/gi, "\n");
      ret=ret.replace(/<br\s*\/?>/gi, "\n");
      return ret;
    };

    this.NLtoBR = function NLtoBR(input){
      var ret = input;
      ret=ret.replace(/\r\n/g, '<br />');
      ret=ret.replace(/\r/g, '<br />');
      ret=ret.replace(/\n/g, '<br />');
      return ret;
    }

    this.URLtoLINK = function URLtoLINK(input){
      var ret = input;
      if( ret.indexOf("aoutlinkedit") == -1 ){
         ret = ret.replace(/(http:\/\/[\x21-\x7e]+)/gi, "<aoutlinkedit><a href='$1' target='_balnk'>$1</a></aoutlinkedit>");
         ret = ret.replace(/(https:\/\/[\x21-\x7e]+)/gi, "<aoutlinkedit><a href='$1' target='_balnk'>$1</a></aoutlinkedit>");
      }
      return ret;
    }

    this.LINKtoURL = function LINKtoURL(input){
      var ret = input;
      ret = ret.replace(/<aoutlinkedit><a href=\".*\">/,"");
      ret = ret.replace(/<\/a><\/aoutlinkedit>/,"");
      return ret;
    }

  }

  var t = new T();

  function home(){
    submit("/dashboard/index");
  }

  function back(){
    submit("/dashboard/index");
  }

  // チケット削除
  function destroyTicket(id){
    log("destroyTicket:" + id);
    io.socket.get('/board/process/', {actionType:"destroy", boardId : '<%= boardId %>', id: id});
  }

  // チケット更新
  function updateTicket(id){
    log("updateTicket:"+id);
    var newContents = $('#ta_'+id).val();
    io.socket.get('/board/process/', {actionType:"update", boardId : '<%= boardId %>', id: id, contents: newContents});
  }

  // チケット作成
  function createTicket(x, y, color){
    log("createTicket:" + x + "," + y);
    io.socket.get('/board/process/',
      {
        actionType:"create",
        contents: "",
        positionX: x + "px",
        positionY: y + "px",
        color: color,
        boardId : '<%= boardId %>',
        userId : '<%= loginInfo.userId %>'
      }
    );
    hideRezizeButton();
  }

  function createTicketByButton() {
    var type = $('#selectTicketType').val();
    createTicket(10, 90, type);
  }

  //チケットリサイズタイマー
  var resizeTimer = false;

  function getTicketTime(d){
    var month = d.getMonth()+1;
    var week = d.getDay();
    var day = d.getDate();
    var hour = _.str.lpad(d.getHours(), 2 ,'0');
    var minute = _.str.lpad(d.getMinutes(), 2, '0');
    var yobi= new Array("日","月","火","水","木","金","土");
    return month+"/"+day+"("+yobi[week]+") "+hour+":"+minute;
  };

  function make(data) {
   var val = data["contents"];
   var nickname = data["nickname"];
   var sticky = $('<div class="sticky"><div class="ticketTitle"><span class="userInfo"></span><div class="rightItems"><span class="createDate"></span><i class="removeIcon glyphicon glyphicon-remove" /></div></div><div class="contentsArea myWebFontClass"></div></div>');
   val=t.URLtoLINK(val);
   val=t.NLtoBR(val);

   sticky.find('.userInfo').text(nickname);

   //年・月・日・曜日を取得する
   sticky.find('.createDate').text(getTicketTime(new Date(data["createdAt"])));
   sticky.find('.contentsArea').html(val);

   function dblTapHandler(){
     var state = 0;
     return function(event){
       var type = event.type;
       switch(state){
       case 0:
         if(type == "touchstart"){
           state = 1;
         }
         break;
       case 1:
         if(type == "touchend"){
           state = 2;
         }
         break;
       case 2:
         if(type == "touchstart"){
           state = 3;
         }
         break;
       case 3:
         if(type === "touchend"){
           $(this).trigger('dbltap');
           state = 0;
         }
         break;
       };
       setTimeout(function(){state = 0;}, 500);
     }
  }

  function dblClickHandler(){
     var flag = false;
     return function(){
       if(flag){
         $(this).trigger('dbltap');
         flag = false;
       } else {
         flag = true;
       }
       setTimeout(function(){flag = false;}, 500);
     }
  }

   var dblTapHandler = dblTapHandler();
   var dblClickHandler = dblClickHandler();

   sticky.appendTo('#board')
      .attr('id', "ticket_"+data["id"])
      .attr('data-id', data["id"])
      .css('width', data["ticketWidth"])
      .css('height', data["ticketHeight"])
      .addClass(data["color"])
      .addClass(data["color"]+"_shadow")
      .animate({left: data["positionX"], top: data["positionY"] })
      .resizable({minHeight: 100, minWidth: 200, maxHeight: 300, maxWidth: 600}) //チケットサイズの最大、最小値の指定
      .resize(function() {
        //log("付箋リサイズイベント発生");
        if (resizeTimer !== false) {
          clearTimeout(resizeTimer);
        }
        // リサイズイベント終了から１秒後にチケットを更新
        resizeTimer = setTimeout(function() {
          //TO DO 付箋内容(textarea)更新中にリサイズするとhtmlタグが混入する不具合対応中
          updateFusen(sticky); //付箋更新
        }, 1000);
      })
      .draggable({stop: updateFusenListener, containment: "#board"})
      .click(dblClickHandler)
      .bind("touchstart touchend", dblTapHandler)
      .bind("dbltap",function(){
        log("dbltap called");
        if (resizeTimer !== false) {
          return false;
        }
        if(sticky.data("editing")){
            return false;
        };
        sticky.data("editing", true);
        sticky.resizable("disable");
        var $self = $(this).find('.contentsArea');
        var id0 = data["id"];
        var c = $self.html();
        c=t.encode2(c);
        $self.html('<textarea class="editArea myWebFontClass">' + c + '</textarea>').addClass('contents_edit')
          .children()
          .focus()
          .bind("touchstart", function(e){
            e.stopPropagation(); // 編集状態でtextareaをクリックした際に、編集状態が解除されないようにするため追加。
          })
          .blur(function() {
            //log("付箋blurイベント発生");
	        sticky.data("editing", false);
	        sticky.resizable("enable");
	        var c2 = $(this).val();
	        c2 = t.encode1(c2);
	        $(this).parent().html(c2);
	        var $sticky = $self.closest('.sticky');
	        updateFusen($sticky);
	      });
	      var ticket_width = $( "#ticket_"+data["id"] ).width();//付箋サイズの取得
	      var ticket_height = $( "#ticket_"+data["id"] ).height();//付箋サイズの取得
	      $( "#ticket_"+data["id"] + " textarea" ).css("width", ticket_width +30);  //textareaのサイズ変更
	      $( "#ticket_"+data["id"] + " textarea" ).css("height", ticket_height -20);//textareaのサイズ変更
      }).mousedown(function() {                              // 付箋をマウスクリック
        $('.selected').each(function(i, elm) {                  // 選択中選択枠を持つ付箋に影を付ける。
          //log("付箋mousedownイベント発生");
          var regExp = new RegExp("ticket");
          var type = elm.className.split(" ");
          for (var i=1 ; i<=type.length ; i++){
            if ( type[i].match(regExp).length !== null){
              $(elm).addClass(type[i]+"_shadow")
              break;
            }
          }
        });
        $('.sticky').removeClass('selected');                    // すべての付箋の選択枠を外す。
        $(this).addClass('selected');                            // クリックした付箋に選択枠を設定する。
        $(this).removeClass(data["color"]+"_shadow");            // クリックした付箋の影を外す。
      });
      sticky.find('.removeIcon').bind('touchstart click', (function(){     // 'X'をマウスクリック
        confirmDeleteTicket(data["id"]);
      }));
    return sticky;
  }

  // 付箋更新処理を呼び出すリスナ
  function updateFusenListener() {
    updateFusen($(this));
  }

  // 付箋更新処理
  function updateFusen($target) {
    // リサイズタイマーをリセット
    clearTimeout(resizeTimer);
    resizeTimer = false;
    var newData = {};
    newData["actionType"] = "update";
    newData["boardId"] = '<%= boardId %>';
    newData["id"] = $target.data('id');
    newData["positionX"] = $target.css('left');
    newData["positionY"] = $target.css('top');
    newData["ticketHeight"] = $target.css('height');
    newData["ticketWidth"] = $target.css('width');
    var cc = $target.find(".contentsArea").html();
    cc=t.LINKtoURL(cc);
    cc=t.BRtoNL(cc);
    newData["contents"] = cc;
    console.dir(newData);
    io.socket.get('/board/process/', newData);
  }

function confirmDeleteTicket(id){
  $("#confirmDeleteTicket").dialog({
      modal: true,
      resizable: false,
      draggable: false,
      open: function(){
      	var focusButton = $(".ui-dialog-buttonset>button:nth-child(2)");
      	focusButton.focus();
      },
      buttons: {
        "はい": function() {
          $(this).dialog("close");
          destroyTicket(id);
        },
        "いいえ": function() {
          $(this).dialog("close");
          return false;
        }
      }
    });
}

// 付箋移動処理
function moveTicket(ticketId, dstBoardId){
	log('ticketid['+ticketId+']');
	var newData = {};
    newData["actionType"] = "move";
    newData["boardId"] = '<%= boardId %>';
    newData["dstBoardId"] = dstBoardId;
    newData["id"] = ticketId;
    newData["nickname"] = '<%= loginInfo.userName %>';
    io.socket.get('/board/process/', newData);

}

function showMoveTicketDialog(ticketId){
  $("#selectBoardDialog").dialog({
      modal: true,
      resizable: false,
      draggable: false,
      buttons: {
        "移動": function() {
          $(this).dialog("close");
          var dstBoardId = $('#dstBoardId').val();
          moveTicket(ticketId, dstBoardId);
        },
        "キャンセル": function() {
          $(this).dialog("close");
          return false;
        }
      }
    });
}

function setUpCanvas(){
	var height = <%= height %>;
	var width = <%= width %>;
	var vsep = <%= bgSepV %>;
	var hsep = <%= bgSepH %>;
	var lineWidth = <%= bgSepLineWidth %>;
	var lineColor = "#<%= bgSepLineColor %>";
	var canvas = $('#mycanvas')[0];
	if (canvas.getContext) {
		var context = canvas.getContext('2d');
		context.lineWidth = lineWidth;
		context.strokeStyle = lineColor;
		var stepY = height/vsep;
		for(var y = stepY; y < height; y+= stepY) {
			context.moveTo(0,y);
			context.lineTo(width,y);
		}
		var stepX = width/hsep;
		for(var x = stepX; x < width; x+= stepX) {
			context.moveTo(x,0);
			context.lineTo(x,height);
		}
		context.stroke();
	}
}

// 付箋右下のリサイズボタンを強制的に背面に移動する
function hideRezizeButton(){
  $(".ui-icon-gripsmall-diagonal-se").each(function(i, elem) {
     $(elem).css("z-index",0);
  });
}

// jQueryオンロード処理
$(function(){

  _.str = s;

  setUpCanvas();

  $("body").contextmenu({
    delegate: ".hasmenu",
    ticketId : undefined,
    menu: [],
        beforeOpen: function(event, ui) {
        var $menu = ui.menu,
            $target = ui.target;
            var sticky = $target.closest('.sticky');
            log("sticky:["+sticky.html()+"]");
            if(sticky.html() != undefined){
               ticketId = sticky.attr('data-id');
                 $("body").contextmenu("replaceMenu",
                  [{title: "移動", cmd: "move"}]);
            } else {
               $("body").contextmenu("replaceMenu",
                  [
                     {title: "作成", children: [
                          <%- contextMenu %>
                          ]
                     }
                  ]
               );
            }
         },
        select: function(event, ui) {
           var cmd = ui.cmd;
           log("CMD:["+cmd+"]");
           if(cmd === "move"){
              showMoveTicketDialog(ticketId);
           } else {
              var $menu = $('ul.ui-menu');
              var top = $('#board').offset().top;
              var left = $('#board').offset().left;
              var posX = $menu.offset().left - left;
              var posY = $menu.offset().top - top;
              createTicket(posX, posY, ui.cmd);
           }
        }
  });

    // 付箋データ
    var ticketData = <%- JSON.stringify(ticketData) %>;

    // 付箋データから付箋を作成し、ボードに追加。
    for(var i = 0; i < ticketData.length; i++){
      var data = ticketData[i];
      var sticky = make(data);
      $('#board').append(sticky);
    }

    log("リスナ登録");
    io.socket.get('/board/register/',{boardId : '<%= boardId %>'});

    // メッセージ受信時に呼び出される関数
    io.socket.on('message', function(data) {
      log("メッセージ受信", data);
      var id = data["id"];
      var action = data['action'];
      log("action["+action+"]");
      if(action == "created"){
        log("チケットを作成します");
        var ms = "<tr id='"+id+"'>"
                +"<td>"+id+"</td>"
                +"<td><input type='button' onclick='destroyTicket("+id+")' value='削除'/></td>"
                +"<td><input type='button' onclick='updateTicket("+id+")' value='更新'/></td>"
                +"<td>"+data["boardId"]+"</td>"
                +"<td>"+data["createUser"]+"</td>"
                +"<td>"+data["nickname"]+"</td>"
                +"<td><textarea id='ta_"+id+"'>"+data["contents"]+"</textarea></td></tr>";

        $('#tickets').append(ms);

        var sticky = make(data);
        $('#board').append(sticky);
        hideRezizeButton();

      } else if(action == "updated"){
        log("チケットを更新します:"+data["id"]+","+data["contents"]);
        $('#ta_'+data["id"]).val(data["contents"]);
        var $sticky = $(".sticky[data-id='"+data['id']+"']");
        // 他ユーザーがチケットを動かす前に編集フラグをfalseにする。
		$sticky.data("editing", false);
        $sticky.animate({'left': data["positionX"], 'top': data["positionY"]});
        $sticky.animate({'height': data["ticketHeight"], 'width': data["ticketWidth"]});
        var ccc = data["contents"];
        ccc=t.URLtoLINK(ccc);
        ccc=t.NLtoBR(ccc);
        $sticky.find(".contentsArea").html(ccc);
      } else if(action == "destroyed"){
        log("チケットを削除します:"+data["id"]);
        console.dir(data);
        $('tr#'+data["id"]).remove();
        $(".sticky[data-id='"+data['id']+"']").remove();
      } else if(action == "enter"){
      	log("ユーザーが入室しました:"+JSON.stringify(data));
      	updateUserList(data);
      } else if(action == "leave"){
      	log("ユーザーが退室しました:"+JSON.stringify(data));
      	updateUserList(data);
      }
    });

	// PCでスマホ的なスクロール
	$('#board')
	.mousedown(function(event){
		var prevEvent;
		var grabFlag = false;
		if($(event.target).is('#board') && !grabFlag){
			grabFlag = true;
			$('*')
			.mousemove(scrollGrabAndDrag)
			.mouseup(endGrabAndDrag)
			.css("cursor", "move");
		}

		function scrollGrabAndDrag(e){
			if(prevEvent == null){
				prevEvent = e;
				return false;
			}
			var movementX = e.screenX - prevEvent.screenX;
			var movementY = e.screenY - prevEvent.screenY;
			var nextX = $('#boardArea').scrollLeft() - movementX;
			var nextY = $('#boardArea').scrollTop() - movementY;
			$('#boardArea').scrollTop(nextY);
			$('#boardArea').scrollLeft(nextX);
			prevEvent = e;
			return false;
		}

		function endGrabAndDrag(){
			$(this).css("cursor", "auto");
			$('*').unbind("mousemove", scrollGrabAndDrag);
			$('*').unbind("mouseup", endGrabAndDrag);
			$('*').css("cursor", "");
			grabFlag = false;
		}
	});
	hideRezizeButton();
});

/**
 * 配列内容が一致しているかを判定する。
 *  *** match() はjsに存在するメソッドのためmatchAに変更
 */
function matchA(array1, array2){
	log("配列内容比較");
	log(array1);
	log(array2);
	if(array1.length !== array2.length){
		return false;
	}
	for(var i = 0; i < array1.length; i++){
		if(array1[i] !== array2[i]){
			return false;
		}
	}
	return true;
}

/*
 * 表示中ユーザーと利用中ユーザーリストの整合性をチェックする。
 *
 * 整合条件は以下の状況
 * 入室の場合: （入室中ユーザー一覧）= (表示中ユーザー一覧) + 入室ユーザー
 * 退室の場合: （入室中ユーザー一覧）+ 退室ユーザー = (表示中ユーザー一覧)
 */
function checkConsistencyOfUserList(action, displayUsers, users, userId){
	var lhs, rhs;
	if(action === "enter"){
		lhs = _.sortBy(users);
		rhs = _.sortBy(displayUsers.concat([userId]));
	} else if(action === "leave"){
		lhs = _.sortBy(users.concat([userId]));
		rhs = _.sortBy(displayUsers);
	} else {
		return false;
	}
    return matchA(lhs, rhs);
}

/**
 * ユーザー一覧を更新する。
 */
function updateUserList(data){
	log("ユーザー一覧更新");

	// 一覧に追加するユーザーの作成
	function getNewUser(userId){
		var $ret = $("<div></div>")
			.attr("id", "id_" + userId)
			.addClass("userInList");
		$ret.append($("<img src='/images/people.png' style='width:30px;margin-right:5px;' />"));
		$ret.append($('<span class="userName">'+userId+'</span>'));
		return $ret;
	}

	// 入室ユーザー表示時のアニメーション効果
	function animateEnteringUser($user){
		$user.fadeIn('slow');
		$user.animate({ backgroundColor: "#7fffd4", fontWeight: "bold"}, 500)
			.animate({ backgroundColor: "#000000",fontWeight: "normal" }, 1000);
	}

	var action = data["action"];

	// 入室中ユーザー一覧
	var users = data["users"];

	// 入退出ユーザー
	var userId = data["userId"];

	// 表示中ユーザー一覧
	var userList = $("#userList .userInList");
	var displayUsers = _.map(userList, function(item){
		return $(item).find(".userName").text();
	});

	// 表示中ユーザーと利用中ユーザーリストが不整合、もしくは、自ユーザーのみ利用の場合リフレッシュ

 	// ユーザー一覧リフレッシュフラグ
 	var refreshUserList = !checkConsistencyOfUserList(action, displayUsers, users, userId);

	// 初期表示時には全利用ユーザーを追加する。
	if(refreshUserList || displayUsers.length == 0){
		log("ボード利用ユーザー一覧を再表示");
		$('#userList').hide()
			.empty();
		_.forEach(users, function(user){
			var $userToAdd = getNewUser(user);
			$('#userList').append($userToAdd);
		});
		$('#userList').fadeIn('slow')
	} else {
		// 他ユーザーが入室した場合
		if(action === "enter"){
			// 入室したユーザーの追加場所を探索
			// （利用ユーザーリスト内で入室ユーザーの１つ前のユーザーIDを取得）
			var prev;
			for(var i = 0; i < users.length - 1; i++){
				if(users[i + 1] === userId){
					prev = users[i];
				}
			}

			// 入室ユーザー要素の作成
			var $userToAdd = getNewUser(userId);
			$userToAdd.hide();
			var found;
			if(prev !== undefined){
				// 追加場所の次に入室ユーザー要素を追加
				found = $("#id_"+prev);
				found.after($userToAdd);
				animateEnteringUser($userToAdd);
			} else {
				// 追加場所が未定義の場合には先頭に追加
				found = $(userList[0]);
				found.before($userToAdd);
				animateEnteringUser($userToAdd);
			}
		}
		// 他ユーザーが退出した場合
		if(action ==="leave"){
			var found = $("#id_"+userId);
			found.fadeOut('slow', function(){
				found.remove();
			});
		}
	}

}
</script>
<style>

body{
	/* body開始位置の調整 */
	padding-top: 51px;
}

.userInList{
	color: white;
	font-size: 14px;
	margin:5px;
}

#userList {
	z-index: 10000;
	position: fixed;
	bottom: 10px;
	right: 10px;
	width: 200px;
	background-color: black;
	opacity: 0.5;
	/* border: 5px gray solid; */
	padding: 3px;
	border-radius: 10px;
    -webkit-border-radius: 5px;
    -moz-border-radius: 5px;
}

#boardTitleEtc {
	z-index: 1000;
	position: fixed;
	/* top: 60px; */
	/* left: 10px; */
	width: 100%;
	/* background-color: white; */
	/* opacity: 0.7; */
	background-color: rgba(255, 255, 255, 0.7);
	/* border: 5px gray solid; */
	/* border: 5px rgba(55, 55, 55, 0.7) solid;*/
	padding: 3px;
	border-radius: 10px;
    -webkit-border-radius: 4px;
    -moz-border-radius: 4px;
}

.customContainer{
	padding-left: 0;
}

table th {
  background-color:#dfd;
}

#info th {
  width:150px;
  text-align:left;
}

/* 付箋スタイル（共通部分） */
.sticky {
  position: absolute;
  cursor: pointer;
  font-size:16pt;
}

/* 付箋のタイトル共通　*/
.ticketTitle {
  position: relative;
  margin: 0 -20px 0px;
  height: 20px;
}

.ticketTitle:before,
.ticketTitle:after {
  content: '';
  position: absolute;
  bottom: 0px;
  left: 0px;
  right: 0px;
  height: 1px;
  border-top: 2px groove #ff0000;
}

/* 付箋のユーザ名 */
.userInfo {
  position: absolute;
  font-size:12px;
  top:2px;
  left:3px;
  color:gray;
  font-family: "Meiryo UI",serif;
}

/* 付箋の作成日 */
.createDate {
  position: absolute;
  top:2px;
  right:20px;
  font-size:12px;
  color:gray;
  font-family: "Meiryo UI",serif;
}

/* 右寄せする要素 */
.rightItems {
  text-align:right;
}

/* 削除アイコン */
.removeIcon {
  top:1px;
  right:3px;
  font-size: 12px; !imortant
  font-weight: 100;
  color:grey;
}

/* 削除アイコン（ホバー時） */
.removeIcon:hover {
  color:black;
}

.contentsArea {
  position: absolute;
  top:20px;
  left:5px;
  clear: both;
  font-size:14px;
  width:100%;
  height:100%;
/*  font-family: "Meiryo UI",serif; */
}

.editArea {
  top:30px;
  left:0px;
  padding: 3px;
  width:235px;
  height:145px;
  font-size: 12pt;
/*  font-family: "Meiryo UI",serif; */
}

/* webフォントの指定 */
@font-face{
	font-family: 'fuijiPWebfont'; /* ふい字P */
	src: url('/fonts/FuiFontP29Subset.eot'); /* IE9以上用 */
	src: url('/fonts/FuiFontP29Subset.eot?#iefix') format('embedded-opentype'), /* IE8以前用 */
		url('/fonts/FuiFontP29Subset.woff') format('woff'), /* モダンブラウザ用 */
		url('/fonts/FuiFontP29Subset.ttf') format('truetype'); /* iOS, Android用 */
/*	font-weight: normal; /* 念の為指定しておきます */
	font-style: normal;
}
.myWebFontClass {
	font-family: 'fuijiPWebfont';
}

/* タイトル部分のフォーム */
.slim-form-control {
  display: block;
  width: 100%;
  height: 25px;
  padding: 0px 12px;
  font-size: 14px;
  line-height: 1.42857143;
  color: #555;
  background-color: #fff;
  background-image: none;
  border: 1px solid #ccc;
  border-radius: 4px;
  -webkit-box-shadow: inset 0 1px 1px rgba(0,0,0,.075);
  box-shadow: inset 0 1px 1px rgba(0,0,0,.075);
  -webkit-transition: border-color ease-in-out .15s,-webkit-box-shadow ease-in-out .15s;
  -o-transition: border-color ease-in-out .15s,box-shadow ease-in-out .15s;
  transition: border-color ease-in-out .15s,box-shadow ease-in-out .15s;
  border-top-right-radius: 0;
  border-bottom-right-radius: 0;
}

/* タイトル部分のボタン */
.slim-btn {
  display: inline-block;
  padding: 0px 12px;
  margin-bottom: 0;
  font-size: 14px;
  font-weight: 400;
  line-height: 23.5px;
  text-align: center;
  white-space: nowrap;
  vertical-align: middle;
  cursor: pointer;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
  /* background-image: none; */
  border: 1px solid transparent;
  border-radius: 4px;
  border-top-left-radius: 0;
  border-bottom-left-radius: 0;
  border-color: #ccc;
}

/* 付箋スタイル（個別部分） */
.sticky {
  position: absolute;
  cursor: pointer;
  font-size:16pt;
}

.selected {
  z-index:100;
  box-shadow: rgba(0,0,0,0.5) 0px 2px 15px 4px;
  -webkit-box-shadow: rgba(0,0,0,0.5) 0px 2px 15px 4px;
  -moz-box-shadow: rgba(0,0,0,0.5) 0px 2px 15px 4px;
  border-radius: 1px; /* iOS7 Safari対応 */
}

.hasmenu {
  z-index:0;
  cursor: pointer;
}

.ui-widget{
  font-size: 1em;
}

.ui-menu {
  width: 160px;
  z-index:1000;
}

#mycanvas {
  <%= canvasAppearance %>
 /* background-position: 0px 80px;*/
}

#board {
  <%= boardAppearance %>
}

#boardArea {
  position: absolute;
  width: 100%;
  height: 100%;
  padding: 82px 0px 0px 0px;
  bottom: 0px;
  overflow-x: scroll;
  overflow-y: scroll;
}
.selectbox{
	font-size: 16px; /* iphoneで拡大表示を回避 */
}
</style>
<div class="customContainer theme-showcase" role="main">
	<div id="boardTitleEtc">
		<div class="myWebFontClass" style="float:left; text-align:center; line-height:25px; font-size:14pt; margin-left:3px;"><%= title %></div>
		<!--h4 style="margin:10px;"><%= description %></h4-->
		<div style="width:200px; margin:0px 20px; float:right;">
			<div class="input-group">
				<select id="selectTicketType" name="selectTicketType" class="selectbox slim-form-control">
				<%- comboMenu %>
				</select>
				<div class="input-group-btn">
					<button id="createTicketButton" type="button" class="slim-btn" onclick="createTicketByButton();">
						<i class="glyphicon glyphicon-plus"></i>
					</button>
				</div><!-- /btn-group -->
			</div><!-- /input-group -->
		</div><!-- /.col-lg-6 -->
	</div><!-- /#boardTitleEtc -->
	<form method="POST">
		<div id="boardArea">
			<input type="hidden" name="boardId" value="<%= boardId %>" />
			<input type="hidden" name="category" value="<%= category %>" />
			<input type="hidden" name="selectedId" value="<%= selectedId %>" />
			<input type="hidden" name="userId" value="<%= loginInfo.userId %>" />
			<canvas id="mycanvas" width="<%= width %>" height="<%= height %>" style="position:absolute;"></canvas>
			<div id="board" class="hasmenu">
				<div id="debugControl" style="display:none;top:100px;left:10px;position: fixed;width:500px;height:300px;">
					<textarea id="debugConsole" style="width:100%;height:100%"></textarea>
					<input type="button" id="debugClear" value="クリア"/>
				</div>
			</div>
			<div id="userList" class="userList" style="display:none"></div>
			<input type="button" style="margin:10px;" value="デバッグ情報" onclick="$('#debugTable').toggle();"/>
			<input type="button" style="margin:10px;" value="ログ表示" onclick="$('#debugControl').toggle();"/>
			<div id="debugTable" style="display:none">
				<table id="tickets" border="1">
				  <tr>
				    <th>ID</th>
				    <th>削除</th>
				    <th>更新</th>
				    <th>ボードID</th>
				    <th>ユーザーID</th>
				    <th>ニックネーム</th>
				    <th>内容</th>
				  </tr>
				<% for( var i in list ) {%>
				  <tr id="<%= list[i].id %>">
				     <td><%= list[i].id %></td>
				     <td><input type="button" onclick="destroyTicket(<%= list[i].id %>)" value="削除"/></td>
				     <td><input type="button" onclick="updateTicket(<%= list[i].id %>)" value="更新"/></td>
				     <td><%= list[i].boardId %></td>
				     <td><%= list[i].createUser %></td>
				     <td><%= list[i].nickname %></td>
				     <td><textarea id="ta_<%= list[i].id %>"><%= list[i].contents %></textarea></td>
				  </tr>
				<% } %>
				</table>
			</div>
		</div><!-- /#boardArea -->
	</form>
</div>

<!-- 付箋削除の確認ダイアログ -->
<div id="confirmDeleteTicket" title="付箋削除の確認" style="display:none">
  <p>
    <span class="ui-icon ui-icon-circle-check" style="float:left; margin:0 7px 30px 0;"></span>
    付箋を削除します。よろしいですか？
  </p>
</div>
<!-- 移動先ボード選択ダイアログ -->
<div id="selectBoardDialog" title="移動先ボード選択" style="display:none">
  <p>
    <span class="ui-icon ui-icon-circle-check" style="float:left; margin:0 7px 30px 0;"></span>
    移動先ボードを選択してください。
    <select id="dstBoardId" style="width:100%">
    <% for( var i in boardList ) {%><option value="<%= boardList[i].id %>"><%= boardList[i].title %></option><% } %>
    </select>
  </p>
</div>
